(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/genby.js":
/*!***********************!*\
  !*** ../pkg/genby.js ***!
  \***********************/
/*! exports provided: create, tick, size, get_pixels, get_wind_directions, alter_world, __wbg_random_2cc0c8d054a5c72a, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tick\", function() { return tick; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"size\", function() { return size; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_pixels\", function() { return get_pixels; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_wind_directions\", function() { return get_wind_directions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"alter_world\", function() { return alter_world; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_2cc0c8d054a5c72a\", function() { return __wbg_random_2cc0c8d054a5c72a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _genby_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./genby_bg */ \"../pkg/genby_bg.wasm\");\n/* tslint:disable */\n\n\n/**\n* @param {number} arg0\n* @param {number} arg1\n* @returns {void}\n*/\nfunction create(arg0, arg1) {\n    return _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"create\"](arg0, arg1);\n}\n\n/**\n* @param {number} arg0\n* @returns {void}\n*/\nfunction tick(arg0) {\n    return _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"tick\"](arg0);\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction getArrayU32FromWasm(ptr, len) {\n    return getUint32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n/**\n* @returns {Uint32Array}\n*/\nfunction size() {\n    const retptr = globalArgumentPtr();\n    _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"size\"](retptr);\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayU32FromWasm(rustptr, rustlen).slice();\n    _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 4);\n    return realRet;\n\n}\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {boolean} arg0\n* @param {boolean} arg1\n* @param {boolean} arg2\n* @returns {Uint8Array}\n*/\nfunction get_pixels(arg0, arg1, arg2) {\n    const retptr = globalArgumentPtr();\n    _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"get_pixels\"](retptr, arg0, arg1, arg2);\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n    _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n    return realRet;\n\n}\n\nlet cachegetFloat32Memory = null;\nfunction getFloat32Memory() {\n    if (cachegetFloat32Memory === null || cachegetFloat32Memory.buffer !== _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetFloat32Memory = new Float32Array(_genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetFloat32Memory;\n}\n\nfunction getArrayF32FromWasm(ptr, len) {\n    return getFloat32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @returns {Float32Array}\n*/\nfunction get_wind_directions() {\n    const retptr = globalArgumentPtr();\n    _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"get_wind_directions\"](retptr);\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayF32FromWasm(rustptr, rustlen).slice();\n    _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 4);\n    return realRet;\n\n}\n\n/**\n* @param {number} arg0\n* @param {number} arg1\n* @param {number} arg2\n* @param {number} arg3\n* @param {number} arg4\n* @returns {void}\n*/\nfunction alter_world(arg0, arg1, arg2, arg3, arg4) {\n    return _genby_bg__WEBPACK_IMPORTED_MODULE_0__[\"alter_world\"](arg0, arg1, arg2, arg3, arg4);\n}\n\nfunction __wbg_random_2cc0c8d054a5c72a() {\n    return Math.random();\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n\n\n//# sourceURL=webpack:///../pkg/genby.js?");

/***/ }),

/***/ "../pkg/genby_bg.wasm":
/*!****************************!*\
  !*** ../pkg/genby_bg.wasm ***!
  \****************************/
/*! exports provided: memory, __wbindgen_global_argument_ptr, create, tick, size, get_pixels, get_wind_directions, alter_world, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./genby */ \"../pkg/genby.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/genby_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var genby__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! genby */ \"../pkg/genby.js\");\n/* harmony import */ var _simulationConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simulationConfig */ \"./simulationConfig.js\");\n\n\n\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\n\ngenby__WEBPACK_IMPORTED_MODULE_0__[\"create\"]();\nconst worldSize = genby__WEBPACK_IMPORTED_MODULE_0__[\"size\"]()\n\ncanvas.width = _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize * worldSize[0];\ncanvas.height = _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize * worldSize[1];\n\nObject(_simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"bindBrush\"])(canvas, genby__WEBPACK_IMPORTED_MODULE_0__[\"alter_world\"]);\n\nconst drawWorld = pixels => {\n  for (let x = 0; x < worldSize[0]; x++) {\n    for (let y = 0; y < worldSize[1]; y++) {\n      let i = y * worldSize[0] + x;\n      const r = pixels[3*i];\n      const g = pixels[3*i+1];\n      const b = pixels[3*i+2];\n      ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n      ctx.fillRect(x*_simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize, y * _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize, _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize, _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize);\n    }\n  }\n};\n\nconst drawWind = winds => {\n  ctx.beginPath();\n  for (let x = 1; x < 20; x++) {\n    for (let y = 1; y < 20; y++) {\n      const x0 = x * (worldSize[0]/ 20);\n      const y0 = y * (worldSize[1]/ 20);\n      let i = y0  * worldSize[0] + x0;\n\n      const windFactor = 500;\n\n      ctx.moveTo(x0 * _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize, y0 * _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize);\n      ctx.lineTo(x0 * _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize + winds[2*i ] * windFactor, y0 * _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize + winds[2*i + 1] * windFactor);\n      \n    }\n  }\n  ctx.stroke();\n  ctx.closePath();\n\n}\n\nconst loop = () => {\n  ctx.clearRect(0,0,_simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize*worldSize[0], _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].cellSize*worldSize[1]);\n  genby__WEBPACK_IMPORTED_MODULE_0__[\"tick\"](0.1);\n  genby__WEBPACK_IMPORTED_MODULE_0__[\"tick\"](0.1);\n  genby__WEBPACK_IMPORTED_MODULE_0__[\"tick\"](0.1);\n  genby__WEBPACK_IMPORTED_MODULE_0__[\"tick\"](0.1);\n  genby__WEBPACK_IMPORTED_MODULE_0__[\"tick\"](0.1);\n  genby__WEBPACK_IMPORTED_MODULE_0__[\"tick\"](0.1);\n  genby__WEBPACK_IMPORTED_MODULE_0__[\"tick\"](0.1);\n  drawWorld(genby__WEBPACK_IMPORTED_MODULE_0__[\"get_pixels\"](_simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].drawHeight, _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].drawWater, _simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].drawAirPressure));\n  if (_simulationConfig__WEBPACK_IMPORTED_MODULE_1__[\"config\"].drawWind)\n    drawWind(genby__WEBPACK_IMPORTED_MODULE_0__[\"get_wind_directions\"]());\n  requestAnimationFrame(loop);\n};\n\nloop();\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./simulationConfig.js":
/*!*****************************!*\
  !*** ./simulationConfig.js ***!
  \*****************************/
/*! exports provided: config, bindBrush, bindCheckbox, bindInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"config\", function() { return config; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindBrush\", function() { return bindBrush; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindCheckbox\", function() { return bindCheckbox; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindInput\", function() { return bindInput; });\nconst config = {\n  drawHeight: true,\n  drawWater: true,\n  drawWind: true,\n  drawAirPressure: false,\n  cellSize: 5,\n  brush: {\n    radius: 15,\n    diffWater: 0.8,\n    diffAirPressure: 0\n  }\n};\n\nconst bindBrush = (canvas, func) => {\n  canvas.addEventListener(\"click\", e => {\n    const x = e.layerX/config.cellSize;\n    const y = e.layerY/config.cellSize;\n    func(x, y, config.brush.radius, config.brush.diffWater, config.brush.diffAirPressure);\n  });\n};\n\nconst bindCheckbox = (id, setValue, initialValue) => {\n  const elem = document.getElementById(id);\n  elem.checked = initialValue;\n  elem.addEventListener(\"change\", () => setValue(elem.checked));\n};\n\nconst bindInput = (id, setValue, initialValue) => {\n  const elem = document.getElementById(id);\n  elem.value = initialValue;\n  elem.addEventListener(\"change\", () => setValue(elem.value));\n};\n\nbindCheckbox(\"drawHeight\", value => config.drawHeight = value, config.drawHeight);\nbindCheckbox(\"drawWater\", value => config.drawWater = value, config.drawWater);\nbindCheckbox(\"drawWind\", value => config.drawWind = value, config.drawWind);\nbindCheckbox(\"drawAirPressure\", value => config.drawAirPressure = value, config.drawAirPressure);\n\nbindInput(\"diffWater\", value => config.brush.diffWater = value, config.brush.diffWater);\nbindInput(\"diffAirPressure\", value => config.brush.diffAirPressure = value, config.brush.diffAirPressure);\nbindInput(\"radius\", value => config.brush.radius = value, config.brush.radius);\n\n\n//# sourceURL=webpack:///./simulationConfig.js?");

/***/ })

}]);